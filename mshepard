Main: 

__author__ = 'mshep'


import topics

def getOption():
    userInput = input("Enter buy, sell, or repair'")
    return userInput

def buyCar():
    """returns price of vehicle a customer would purchase from Jeffco Car Dealership"""
    if getOption("buy"):
        milesInput = input("Enter miles")
        makeInput = input("Enter make")
        modelInput = input("Enter model")
        yearInput = input("Enter year")
        soldInput = ""
        price = topics.purchase_price(milesInput, makeInput, modelInput, yearInput, soldInput)
        print(price)

def sellCar():
    """returns the price of a vehicle that is sold by Jeffco Car Dealership"""
    if getOption("sell"):
        milesInput = input("Enter miles")
        makeInput = input("Enter make")
        modelInput = input("Enter model")
        yearInput = input("Enter year")
        soldInput = input("Enter sold date")
        price = topics.sale_price(milesInput, makeInput, modelInput, yearInput, soldInput)
        print(price)
def repair():
    """retains the price of a repair"""
    if getOption("repair"):
        repairCost = input("Enter repair cost")
        repairDate = input("Enter repair date")
        topics.repair_cost(repairCost, repairDate)


Topics.py

__author__ = 'mshep'


from abc import ABCMeta, abstractmethod
class Vehicle(object):
    """A vehicle for sale by Jeffco Car Dealership.


    Attributes:
        wheels: An integer representing the number of wheels the vehicle has.
        miles: The integral number of miles driven on the vehicle.
        make: The make of the vehicle as a string.
        model: The model of the vehicle as a string.
        year: The integral year the vehicle was built.
        sold_on: The date the vehicle was sold.
    """

    __metaclass__ = ABCMeta

    base_sale_price = 0
    wheels = 0
    repairCost = 0
    repairDate = ""

    def __init__(self, miles, make, model, year, sold_on):
        self.miles = miles
        self.make = make
        self.model = model
        self.year = year
        self.sold_on = sold_on

    def sale_price(self):
        """Return the sale price for this vehicle as a float amount."""
        if self.sold_on is not None:
            return 0.0  # Already sold
        return 5000.0 * self.wheels

    def purchase_price(self):
        """Return the price for which we would pay to purchase the vehicle."""
        if self.sold_on is None:
            return 0.0  # Not yet sold
        return self.base_sale_price - (.10 * self.miles)

    def repair_cost(self):
        """ set up local variables cost_of_repair, date_of_repair
        ... make these variables of type list so that each time
        ... a repair occurs, the fact can be retained. """
    cost_of_repair = []
    date_of_repair = []
    cost_of_repair.append(repairCost)
    date_of_repair.append(repairDate)

    @abstractmethod
    def vehicle_type(self):
        """"Return a string representing the type of vehicle this is."""
        return self.year + self.make + self.model


class Car(Vehicle):
    """A car for sale by Jeffco Car Dealership."""

    base_sale_price = 8000
    wheels = 4

    def vehicle_type(self):
        """"Return a string representing the type of vehicle this is."""
        return 'car'

class Truck(Vehicle):
    """A truck for sale by Jeffco Car Dealership."""

    base_sale_price = 10000
    wheels = 4

    def vehicle_type(self):
        """"Return a string representing the type of vehicle this is."""
        return 'truck'

class Motorcycle(Vehicle):
    """A motorcycle for sale by Jeffco Car Dealership."""

    base_sale_price = 4000
    wheels = 2

    def vehicle_type(self):
        """"Return a string representing the type of vehicle this is."""
        return 'motorcycle'



